;; -*- mode: emacs-lisp -*-

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(starter-kit
                      bm
                      coffee-mode
                      color-theme
                      color-theme-library
                      color-theme-molokai
                      color-theme-monokai
                      color-theme-solarized
                      color-theme-ir-black
                      clojure-mode
                      deft
                      find-file-in-project
                      find-things-fast
                      flx-ido
                      fountain-mode
                      gist
                      highlight-indentation
                      idle-highlight-mode
                      imenu-list
                      lua-mode
                      magit
                      markdown-mode
                      mustache-mode
                      ;; nrepl
                      olivetti
                      org
                      org-magit
                      paredit
                      projectile
                      pyflakes
                      pylint
                      python-mode
                      python-pep8
                      ruby-mode
                      typo
                      writeroom-mode
                      yaml-mode)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; Set PATH (read in from login shell).
;; - http://stackoverflow.com/a/2566945

(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell
      (replace-regexp-in-string "[[:space:]\n]*$" ""
        (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))

;; start a single emacs server
(server-start)

;; flx-ido
;; - https://github.com/lewang/flx
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; projectile
;; - https://github.com/bbatsov/projectile
(projectile-global-mode)
(setq projectile-use-git-grep t)
(setq projectile-enable-caching t)
(setq projectile-require-project-root nil)
(setq projectile-globally-ignored-directories
      (append '("build"
                "eggs"
                "git-eggs"
                "develop-eggs"
                "node_modules"
                "log"
                "tmp")
              projectile-globally-ignored-directories))
;; S-r: search entire project
;; C-u S-r (or M-1 S-r): allows user to specify search directory
(global-set-key [(super r)] 'projectile-grep)

(require 'find-things-fast)

;; Set default font to Source Code Pro.
;; - https://github.com/adobe/Source-Code-Pro
;; - http://blogs.adobe.com/typblography/2012/09/source-code-pro.html
(add-to-list 'default-frame-alist '(font . "-apple-Source_Code_Pro-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1"))

(require 'color-theme)
(require 'color-theme-library)
(require 'color-theme-solarized)
(require 'color-theme-ir-black)
(setq color-theme-is-global nil)

(defun color-theme-set-solarized-light ()
  (interactive)
  (setq frame-background-mode 'light)
  (load-theme 'solarized t)
  (enable-theme 'solarized))

(defun color-theme-set-solarized-dark ()
  (interactive)
  (setq frame-background-mode 'dark)
  (load-theme 'solarized t)
  (enable-theme 'solarized))

(color-theme-monokai)

;; Try this in terminal mode:
;; (set-background-color nil)

(add-hook 'after-make-frame-functions
          (lambda (frame)
             (select-frame frame)
             (if (window-system frame)
                 (color-theme-monokai)
                 (color-theme-ir-black))))

;; Enable mouse support in terminal.
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                            (interactive)
                            (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                            (interactive)
                            (scroll-up 1)))
(defun track-mouse (e))
(setq mouse-sel-mode t)

;; Enable cua mode, but only for rectangles.
;; (C-RET will start a rectangular selection.)
(setq cua-enable-cua-keys nil)
(cua-mode t)

;; Display ido results vertically, rather than horizontally.
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))
(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

;; use clojure-mode to edit ClojureScript files
(add-to-list 'auto-mode-alist '("\.cljs$" . clojure-mode))

;; Set the default fill column width to 79.
(setq-default fill-column 79)

;; indentation highlighting
(require 'highlight-indentation)

;; enable mustache major mode (for editing mustache templates)
(require 'mustache-mode)

;; Configure Fountain Mode.
(require 'fountain-mode)
(add-to-list 'auto-mode-alist '("\\.fountain$" . fountain-mode))
;; Don't indent elements.
(setq fountain-indent-elements nil)
;; Use visual line mode by default.
(add-hook 'fountain-mode-hook 'turn-off-auto-fill)
(add-hook 'fountain-mode-hook 'turn-on-visual-line-mode)
;; Use Olivetti by default.
(add-hook 'fountain-mode-hook 'turn-on-olivetti-mode)
(defun hide-fringes ()
  (interactive)
  ;; (set-face-attribute 'fringe nil :background "#272822" :foreground "#FFFFFF")
  (set-window-fringes nil 0 0))
(add-hook 'fountain-mode-hook 'hide-fringes)

;; set indentation in coffee mode
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(coffee-tab-width 2)
 '(ns-use-native-fullscreen nil)
 '(writeroom-maximize-window nil))

;; ;; nrepl configuration
;; (require 'nrepl)
;; (setq nrepl-popup-stacktraces nil)
;; (add-hook 'nrepl-mode-hook
;;           (lambda () (setq show-trailing-whitespace nil)))
;; (add-hook 'nrepl-interaction-mode-hook
;;           'nrepl-turn-on-eldoc-mode)

;; configure the file extensions used by markdown mode
(setq auto-mode-alist
  (cons '("\\.md" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
    (cons '("\\.mdown" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist
  (cons '("\\.markdown" . markdown-mode) auto-mode-alist))

;; Use visual line mode by default for markdown files.
(add-hook 'markdown-mode-hook 'turn-off-auto-fill)
(add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)

;; Use visual line mode by default for org files.
(add-hook 'org-mode-hook 'turn-off-auto-fill)
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)

;; reduce the number of signals that can trigger the alarm bell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        up down
                        previous-line next-line
                        backward-char forward-char
                        mwheel-scroll))
          (ding))))

;; actually, don't trigger the alarm bell
(setq ring-bell-function
      (lambda ()))

;; move point from window to window using shift and the arrow keys
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Use org-indent-mode by default
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)

;; display trailing whitespace
(setq-default show-trailing-whitespace t)

;; Automatically delete trailing whitespace, except in the case of Fountain
;; Mode. (Fountain relies on trailing whitespace in certain circumstances.)
(add-hook 'before-save-hook 'my-nuke-trailing-whitespace)
(defun my-nuke-trailing-whitespace ()
  ;; Note additional option: https://github.com/lewang/ws-butler
  (when (not (derived-mode-p 'fountain-mode))
    (delete-trailing-whitespace)))

;; do not scroll dramatically when moving one line at a time
(setq-default scroll-conservatively 1)

;; highlight 80+ for Python
(add-hook 'python-mode-hook (lambda () (highlight-80+-mode)))

;; Enable the menu bar
(menu-bar-mode t)

;; Show column numbers
(setq column-number-mode t)

;; Switch to prev/ next buffer using OS X keybindings
(global-set-key (kbd "s-{") 'switch-to-prev-buffer)
(global-set-key (kbd "s-}") 'switch-to-next-buffer)

;; Enable and configure typo.el.
(require 'typo)

(add-hook 'text-mode-hook 'typo-mode)

(define-typo-cycle typo-cycle-right-single-quotation-mark
  "Cycle through the typewriter apostrophe and the right quotation mark."
  ("'" "’" ))

(define-typo-cycle typo-cycle-left-single-quotation-mark
  "Cycle through the backtick and the left single quotation mark."
  ("`" "‘"))

(define-typo-cycle typo-cycle-dashes
  "Cycle through various dashes."
  ("-" ; HYPHEN-MINUS
   "—" ; EM DASH
   "–" ; EN DASH
   "−" ; MINUS SIGN
   "‐" ; HYPHEN
   "‑" ; NON-BREAKING HYPHEN
  ))

;; Spell checking with Flyspell.
;; Requires aspell: $ brew install aspell --lang=en
(add-hook 'text-mode-hook 'flyspell-mode)

;; Configure Deft. (http://jblevins.org/projects/deft/)
;; Additional resources:
;; - http://emacs-fu.blogspot.ca/2011/09/quick-note-taking-with-deft-and-org.html
;; - http://www.jontourage.com/2013/08/15/setting-up-deft-mode-in-emacs-with-org-mode/
;; - http://www.emacswiki.org/emacs/DeftMode
(when (require 'deft nil 'noerror)
   (setq
      deft-extension "org"
      deft-directory "~/Dropbox/org/"
      deft-text-mode 'org-mode
      deft-auto-save-interval 0))

;; bm (https://github.com/joodland/bm)
(require 'bm)

;; Set up bookmark (bm, https://github.com/joodland/bm). This option makes
;; `bm-toggle` toggle only between bookmarks in the *current* buffer.
(setq bm-cycle-all-buffers nil)

;; misc functions, from emacs-prelude
;; https://github.com/bbatsov/emacs-prelude/blob/master/modules/prelude-core.el

(defun prelude-google ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))

(defun prelude-swap-windows ()
  "If you have 2 windows, it swaps them."
  (interactive)
  (if (/= (count-windows) 2)
      (message "You need exactly 2 windows to do this.")
    (let* ((w1 (first (window-list)))
           (w2 (second (window-list)))
           (b1 (window-buffer w1))
           (b2 (window-buffer w2))
           (s1 (window-start w1))
           (s2 (window-start w2)))
      (set-window-buffer w1 b2)
      (set-window-buffer w2 b1)
      (set-window-start w1 s2)
      (set-window-start w2 s1)))
  (other-window 1))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fountain-scene-heading ((t (:weight bold))))
 '(hl-line ((t nil))))
